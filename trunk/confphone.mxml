<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="init()" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#FFFCFC, #FFFCFC]">

<mx:Script>
<![CDATA[

	import flash.net.NetConnection;
	import flash.external.*;
	import mx.utils.UIDUtil;

	[Bindable]
	private var netConnection:NetConnection = null;
	private var incomingNetStream:NetStream = null;
	private var outgoingNetStream:NetStream = null;

	private var mic:Microphone = null;
	private var myuid:String;
	public var username:String;


	public function windowCloseEvent():void 
	{
		netConnection.close();
	}

	private function init():void {
		simpleLabel.text="Waiting....."
		
		ExternalInterface.addCallback("windowCloseEvent", windowCloseEvent);
		
		initMicrophone();
		myuid = UIDUtil.createUID();

		NetConnection.defaultObjectEncoding = flash.net.ObjectEncoding.AMF0;	
		netConnection = new NetConnection();
		netConnection.objectEncoding = ObjectEncoding.AMF0;
		netConnection.client = this;
		netConnection.addEventListener( NetStatusEvent.NET_STATUS , netStatus );
		netConnection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
		
		netConnection.connect("rtmp:/voicebridge");		
	}

	private function initMicrophone():void {
		mic = getMicrophone();

		if(mic == null){
			trace("No available microphone");
		} else {
			//mic.setUseEchoSuppression(true);
			mic.setLoopBack(false);
			mic.setSilenceLevel(10);
			mic.gain = 60;
			mic.codec = SoundCodec.PCMU;
			
			mic.addEventListener(ActivityEvent.ACTIVITY, micActivityHandler);
			mic.addEventListener(StatusEvent.STATUS, micStatusHandler);
		}
	}							

	private function getMicrophone() :Microphone 
	{
		var mic:Microphone = Microphone.getEnhancedMicrophone();
		var options:MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
		options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
		options.nonLinearProcessing = true;
		mic.enhancedOptions = options;

		return mic;
	}

	private function micActivityHandler(event:ActivityEvent):void {
		//simpleLabel.text= "activityHandler: " + event;
	}


	private function micStatusHandler(event:StatusEvent):void {		
		switch(event.code) {

		case "Microphone.Muted":
			break;
		case "Microphone.Unmuted":
			break;
		default:
			trace("unknown micStatusHandler event: " + event);
		}
	}


	private function netStatus (evt:NetStatusEvent ):void {		    	
		switch(evt.info.code) {
		
		case "NetConnection.Connect.Success":
			simpleLabel.text="Connection success!"; 
			manageCallParticipant("create", "");	
			manageCallParticipant("Protocol", "RTMP");				
			manageCallParticipant("RtmpSendStream", myuid + "_sender");			
			manageCallParticipant("RtmpRecieveStream", myuid + "_reciever");			
			manageCallParticipant("ConferenceId", myuid + "_conference");	
			
			manageVoiceBridge("MonitorOutgoingCalls", "true");				
			break;

		case "NetConnection.Connect.Failed":
			simpleLabel.text="Failed to connect";
			break;

		case "NetConnection.Connect.Rejected":
			simpleLabel.text="Rejected";
			break;

		case "NetStream.Play.StreamNotFound":
			simpleLabel.text="No Stream";
			break;

		case "NetStream.Play.Failed":
			simpleLabel.text="Play error";			
			break;
			
		case "NetStream.Play.Start":		
			simpleLabel.text="Play start";
			
			break;
		case "NetStream.Play.Stop":			
			simpleLabel.text="Play stop";					
			break;
			
		case "NetStream.Buffer.Full":
			break;

		default:
			simpleLabel.text= evt.info.code ;
		}		    	

	}

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }
        

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            	simpleLabel.text= "securityErrorHandler: " + event;
        }
        
	public function manageCallParticipant(param:String, value:String):void 
	{
		netConnection.call("manageCallParticipant", null, myuid, param, value);
	}
	
	public function manageVoiceBridge(param:String, value:String):void 
	{
		netConnection.call("manageVoiceBridge", null, param, value);
	}

	
	public function callsEventNotification(eventSource:String, callEvent:String, callState:String, info:String, callDtmf:String, treatmentdId:String, noOfCalls:String, callId:String, confId:String, callInfo:String):*
	{
		simpleLabel.text = eventSource + " " + callEvent + " " + callState;


		if (eventSource == "monitorCallStatus" && callEvent == "001 STATE CHANGED")
		{	
			if (callState == "110 ANSWERED" &&  callInfo == "Anonymous@" + txtInput.text)
			{
				connected(myuid + "_reciever", myuid + "_sender");
			}

			if (callState == "299 ENDED")
			{
				disconnected(); 			
			}
		}
	}
	
	public function errorEventNotification(error:String):*
	{
		simpleLabel.text =  "Error: " + error;
	}
	
	public function infoEventNotification(info:String):*
	{
		simpleLabel.text =  "Info: " + info;
	}	
	
	public function statisticsNotification(numberOfConferences:String, totalMembers:String, totalSpeaking:String, timeBetweenSends:String, averageSendTime:String, maxSendTime:String):*
	{
	
	}

        
	public function disconnected():* {
		simpleLabel.text="Disconnected";
		
		incomingNetStream.play(false); 
		outgoingNetStream.attachAudio(null);
		outgoingNetStream.publish(null);

	}

	public function connected(publishName:String, playName:String):* {
		simpleLabel.text= "Connected: " + publishName;
		
		incomingNetStream = new NetStream(netConnection);
		incomingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
		incomingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);

		outgoingNetStream = new NetStream(netConnection);
		outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
		outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			
		outgoingNetStream.attachAudio(mic);

		incomingNetStream.play(playName); 
		outgoingNetStream.publish(publishName, "live"); 	
		
	}


	public function doCall():void {
	
		if (txtInput.text != "") {
			manageCallParticipant("SecondPartyNumber", txtInput.text);
			manageCallParticipant("MakeCall", "");

		} else {
			simpleLabel.text = "Please enter a phone number";	
		}
	}

	public function doCallChar(chr:String):void {
		manageCallParticipant("SendDtmfKey", chr);
	}

	public function doHangUp():void {
		manageCallParticipant("CancelCall", "");			
	}		

]]>
</mx:Script>
<mx:Button x="110" y="40" label="1" id="cmdOne" click="doCallChar('1');" width="30" height="30"/>
<mx:Button x="140" y="40" label="2" id="cmdTwo" click="doCallChar('2');" width="30" height="30"/>
<mx:Button x="170" y="40" label="3" id="cmdThree" click="doCallChar('3');" width="30" height="30"/>
<mx:Button x="110" y="70" label="4" id="cmdFour" click="doCallChar('4');" width="30" height="30"/>
<mx:Button x="140" y="70" label="5" id="cmdFive" click="doCallChar('5');" width="30" height="30"/>
<mx:Button x="170" y="70" label="6" id="cmdSix" click="doCallChar('6');" width="30" height="30"/>
<mx:Button x="110" y="100" label="7" id="cmdSeven" click="doCallChar('7');" width="30" height="30"/>
<mx:Button x="140" y="100" label="8" id="cmdEight" click="doCallChar('8');" width="30" height="30"/>
<mx:Button x="170" y="100" label="9" id="cmdNine" click="doCallChar('9');" width="30" height="30"/>
<mx:Button x="110" y="130" label="*" id="cmdStar" click="doCallChar('*');" width="30" height="30"/>
<mx:Button x="140" y="130" label="0" id="cmdZero" click="doCallChar('0');" width="30" height="30"/>
<mx:Button x="170" y="130" label="#" id="cmdPound" click="doCallChar('#');" width="30" height="30"/>
<mx:TextInput x="110" y="12" width="200" text="sip:1000@192.168.1.74" id="txtInput" fontSize="10" height="22"/>
<mx:Button x="110" y="160" label="Call" id="cmdCall" click="doCall();" width="90" fontSize="9" height="20"/>
<mx:Button x="110" y="180" label="Hang Up" width="90" click="doHangUp();" id="cmdHangUp" height="20" fontSize="9"/>
<mx:Label x="5" y="220" id="simpleLabel" fontSize="10" text=""/>

</mx:Application>
